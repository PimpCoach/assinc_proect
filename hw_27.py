import asyncio
import os

from openai import AsyncOpenAI
from dotenv import load_dotenv

from hw_27_data import DATA

VLADIMIR_KEY_VSE_GPT = os.getenv("VLADIMIR_KEY_VSE_GPT")
BASE_URL = os.getenv("BASE_URL", "https://api.vsegpt.ru/v1")Ё
load_dotenv()

MAX_CHUNKS_SIZE = 5000  # Максимальная длина текста для 1 запроса
SLEEP_TIME = 4  # Задержка между запросами
OUTPUT_FILE = "Lection.md"  # Файл в котором будет конспект

PROMPT_THEME = """
Привет!

Определи общую тему  текста. И постарайся максимально полно и точно описать её,
с использованием пунктов и подпунктов.

Не додумывай того, чего там небыло.
Исключи small talks.
"""

PROMPT_TIMESTAMPS = """
Привет!

Ты - ассистент по созданию таймкодов для видео.
Тебе будет предоставлен текст с таймкодами из видео.
Твоя задача - создать краткое описание каждого смыслового блока.
Ты не должен использовать полное цитирование. Создай краткое описание для блока.
Каждый блок должен начинаться с таймкода в формате чч:мм:сс.
Описание должно быть одним предложением, передающим суть начинающегося отрезка.
Игнорируй слишком короткие фрагменты или паузы.
Объединяй связанные по смыслу части в один большой блок.
Описания должны быть в стиле, как это обычно делают на youtube.



ВАЖНО.
СТРОГИЕ ПРАВИЛА:
1. Для видео длительностью:
   - до 30 минут: максимум 5 таймкодов
   - 30-60 минут: максимум 8 таймкодов
   - 1-2 часа: максимум 10 таймкодов
   - 2+ часа: максимум 15 таймкодов

2. Минимальный интервал между таймкодами:
   - для коротких видео (до 30 мин): 3-5 минут
   - для длинных видео: 10-15 минут

3. Объединяй близкие по смыслу темы в один таймкод

ВАЖНО: Если ты превысишь количество таймкодов - твой ответ будет отклонён!

В твоём ответе должны быть только таймкоды и описания.
Никаких других комментариев или пояснений.

КАК ПИСАТЬ?

Ты не пишешь описательные, длинные предложения. 
Вроде: "Пояснение адаптивного подхода к верстке на примере Visual Studio Code, где контент перестраивается в зависимости от размера экрана. "

Ты пишешь короткий, ёмкий вариант.
"Адаптивный подход к вёрстке. Пример в Visual Studio Code. Контент перестраивается в зависимости от размера экрана."
Или даже ещё немного короче.

Спасибо!
"""

PROMPT_CONSPECT_WRITER = """
Привет!
Ты опытный технический писатель. Ниже, я предоставляю тебе полный текст лекции а так же ту часть,
с которой ты будешь работать.

Ты великолепно знаешь русский язык и отлично владеешь этой темой.

Тема занятия: {topic}

Полный текст лекции:
{full_text}

Сейчас я дам тебе ту часть, с котороый ты будешь работать. Я попрошу тебя написать конспект лекции.
А так же блоки кода.

Ты пишешь в формате Markdown. Начни с заголовка 2го уровня.
В тексте используй заголовки 3го уровня.

Используй блоки кода по необходимости.

Отрезок текста с которым ты работаешь, с которого ты будешь работать:
{text_to_work}
"""

client = AsyncOpenAI(api_key=VLADIMIR_KEY_VSE_GPT, base_url=BASE_URL)
model_gpt = "openai/gpt-4o-mini" #Идентификатор используемой модели
max_tokens_gpt = 16000 #Максимальное количество жетонов, которое может быть сгенерировано в завершении чата. Это значение можно использовать для контроля стоимости текста.
temperature_gpt = 0.7 #Температура выборки (фантазия) может использоваться, от 0 до 2 

async def get_ai_requst(prompt: str, max_retries: int = 3, base_delay: float = 2.0):
    """
    Отправляет запрос к API с мехаизмом повторных попыток
    base_delay - начальная задержка, которая будет увеличиваться экспонециально
    :param promt: текст запроса
    :param max_retries: максимальное количество попыток
    :param base_delay: начальная задержка между попытками
    :return: ответ от API
    :except RateLimitError: обработка ошибки превышения лимита запроса
    :except APITimeoutError: обработка ошибки таймаут запроса
    :except APIConnectionError: обработка ошибки ошибки соединения

    """
    for attempt in range(max_retries):
        try:
            response = await client.chat.completions.create(
                model = model_gpt,
                messages = [{"role": "user", "content": prompt}],
                max_tokens = max_tokens_gpt,
                temperature = temperature_gpt
            )
            return response.choices[0].message.content

        except openai.RateLimitError:
            if attempt == max_retries - 1: # Проверяем не последняя ли это попытка  
                raise # если последняя, то отдаем ошибку наружу
            delay = base_delay * (2**attempt)  # Если не последнняя, то делаем экспоненциальное увеличение время задержки
            await asyncio.sleep(delay) # ждем перед следующей попыткой

        except openai.APITimeoutError:
            if attempt == max_retries - 1:
                raise
            delay = base_delay * (2 ** attempt)
            await asyncio.sleep(delay)
            
        except openai.APIConnectionError:
            if attempt == max_retries - 1:
                raise
            delay = base_delay * (2 ** attempt)
            await asyncio.sleep(delay)
